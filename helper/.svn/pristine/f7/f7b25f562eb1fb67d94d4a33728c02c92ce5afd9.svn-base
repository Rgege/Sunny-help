<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>JSON校验格式化</title>
    <!--<script src="http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script>-->
    <link rel="stylesheet" th:href="@{/font-awesome/css/font-awesome.css}"/>
    <link rel="stylesheet" th:href="@{/bootstrap/css/bootstrap.min.css}"
          href="../../../static/bootstrap/css/bootstrap.min.css"/>
    <link rel="stylesheet" th:href="@{/bootstrap/css/bootstrap-select.min.css}"
          href="../../../static/bootstrap/css/bootstrap-select.min.css"/>
    <link rel="stylesheet" th:href="@{/sweetalert/sweetalert.css}"
          href="../../../static/sweetalert/sweetalert.css" type="text/css"/>
    <script th:src="@{/bootstrap/js/Popper.min.js}" src="../../../static/bootstrap/js/Popper.min.js"
            type="text/javascript" charset="utf-8"></script>
    <script th:src="@{/js/jq/jquery-3.3.1.js}" src="../../../static/js/jq/jquery-3.3.1.js"
            type="text/javascript" charset="utf-8"></script>
    <script th:src="@{/bootstrap/js/bootstrap.min.js}" src="../../../static/bootstrap/js/bootstrap.min.js"
            type="text/javascript" charset="utf-8"></script>
    <script th:src="@{/bootstrap/js/bootstrap-select.min.js}" src="../../../static/bootstrap/js/bootstrap-select.min.js"
            type="text/javascript" charset="utf-8"></script>
    <script th:src="@{/sweetalert/sweetalert.js}" src="../../../static/sweetalert/sweetalert.js"
            type="text/javascript" charset="utf-8"></script>
    <script th:src="@{/js/plug/auto-line-number.js}" src="../../../static/js/plug/auto-line-number.js"
            type="text/javascript" charset="utf-8"></script>
    <style>
        body {
            padding: 0px;
            margin: 0px;
            background-position: center;
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
        }

        .inline {
            float: left;
        }

        #reqParam {
            margin-left: 30px;
        }

        #resultShow {
            width: 47%;
            height: 500px;
        }

        #textIn {
            width: 50%;
            height: 500px;
            margin-left: 30px;
        }

        #sendBtn {
            float: right
        }

        pre {
            font-family: 'consolas';
        }

        .Canvas {
            font: 14px/18px 'consolas';
            background-color: #ECECEC;
            color: #000000;
            border: solid 1px #CECECE;
        }

        .ObjectBrace {
            color: #00AA00;
            font-weight: bold;
        }

        .ArrayBrace {
            color: #0033FF;
            font-weight: bold;
        }

        .PropertyName {
            color: #CC0000;
            font-weight: bold;
        }

        .String {
            color: #007777;
        }

        .Number {
            color: #AA00AA;
        }

        .Boolean {
            color: #0000FF;
        }

        .Function {
            color: #AA6633;
            text-decoration: italic;
        }

        .Null {
            color: #0000FF;
        }

        .Comma {
            color: #000000;
            font-weight: bold;
        }

    </style>

    <script>
        //格式化代码函数,已经用原生方式写好了不需要改动,直接引用就好
        var formatJson = function (json, options) {
            var reg = null,
                formatted = '',
                pad = 0,
                PADDING = '    ';
            options = options || {};
            options.newlineAfterColonIfBeforeBraceOrBracket = (options.newlineAfterColonIfBeforeBraceOrBracket === true) ? true : false;
            options.spaceAfterColon = (options.spaceAfterColon === false) ? false : true;
            if (typeof json !== 'string') {
                json = JSON.stringify(json);
            } else {
                json = JSON.parse(json);
                json = JSON.stringify(json);
            }
            reg = /([\{\}])/g;
            json = json.replace(reg, '\r\n$1\r\n');
            reg = /([\[\]])/g;
            json = json.replace(reg, '\r\n$1\r\n');
            reg = /(\,)/g;
            json = json.replace(reg, '$1\r\n');
            reg = /(\r\n\r\n)/g;
            json = json.replace(reg, '\r\n');
            reg = /\r\n\,/g;
            json = json.replace(reg, ',');
            if (!options.newlineAfterColonIfBeforeBraceOrBracket) {
                reg = /\:\r\n\{/g;
                json = json.replace(reg, ':{');
                reg = /\:\r\n\[/g;
                json = json.replace(reg, ':[');
            }
            if (options.spaceAfterColon) {
                reg = /\:/g;
                json = json.replace(reg, ':');
            }
            (json.split('\r\n')).forEach(function (node, index) {
                //console.log(node);
                var i = 0,
                    indent = 0,
                    padding = '';

                if (node.match(/\{$/) || node.match(/\[$/)) {
                    indent = 1;
                } else if (node.match(/\}/) || node.match(/\]/)) {
                    if (pad !== 0) {
                        pad -= 1;
                    }
                } else {
                    indent = 0;
                }

                for (i = 0; i < pad; i++) {
                    padding += PADDING;
                }

                formatted += padding + node + '\r\n';
                pad += indent;
            });
            return formatted;
        };

        //着色
        window.TAB = "    ";

        function IsArray(obj) {
            return obj &&
                typeof obj === 'object' && typeof obj.length === 'number' && !(obj.propertyIsEnumerable('length'));
        }

        function Process() {
            $("#resultShow").empty();
            var requestBody = document.getElementById('request-body');
            var orgTxt = requestBody.value;
            try {
                var json = formatJson(orgTxt);
                var html = "";
                if (json == "") {
                    json = '""';
                }
                var obj = eval("[" + json + "]");
                html = ProcessObject(obj[0], 0, false, false, false);
                document.getElementById("resultShow").innerHTML = html;
            } catch (e) {
                var warn = $('<div id="warn"></div>');
                var errorMsg = e.message;
                if (errorMsg.indexOf("at position")==-1) {
                    console.log(1)
                    var span1 = $('<span class="label label-danger"> You have an error in your JOSN syntax:' + e.message + '</span></br>');
                    warn.append(span1);
                } else {
                    console.log(2)
                    var errorLocation = errorMsg.split("at position")[1].trim();
                    var errorNear = orgTxt.substring(errorLocation - 30, errorLocation);
                    var span1 = $('<span class="label label-danger"> You have an error in your JOSN syntax:' + e.message + '</span></br>');
                    var span2 = $('<span class="label label-danger">Near: ' + errorNear + '</span>');
                    warn.append(span1);
                    warn.append(span2);
                }
                $("#resultShow").append(warn);
            }
        }

        function ProcessObject(obj, indent, addComma, isArray, isPropertyContent) {
            var html = "";
            var comma = (addComma) ? "<span class='Comma'>,</span> " : "";
            var type = typeof obj;
            if (IsArray(obj)) {
                if (obj.length == 0) {
                    html += GetRow(indent, "<span class='ArrayBrace'>[ ]</span>" + comma, isPropertyContent);
                } else {
                    html += GetRow(indent, "<span class='ArrayBrace'>[</span>", isPropertyContent);
                    for (var i = 0; i < obj.length; i++) {
                        html += ProcessObject(obj[i], indent + 1, i < (obj.length - 1), true, false);
                    }
                    html += GetRow(indent, "<span class='ArrayBrace'>]</span>" + comma);
                }
            } else {
                if (type == "object" && obj == null) {
                    html += FormatLiteral("null", "", comma, indent, isArray, "Null");
                } else {
                    if (type == "object") {
                        var numProps = 0;
                        for (var prop in obj) {
                            numProps++;
                        }
                        if (numProps == 0) {
                            html += GetRow(indent, "<span class='ObjectBrace'>{ }</span>" + comma, isPropertyContent)
                        } else {
                            html += GetRow(indent, "<span class='ObjectBrace'>{</span>", isPropertyContent);
                            var j = 0;
                            for (var prop in obj) {
                                html += GetRow(indent + 1, '<span class="PropertyName">"' + prop + '"</span>: ' + ProcessObject(obj[prop], indent + 1, ++j < numProps, false, true))
                            }
                            html += GetRow(indent, "<span class='ObjectBrace'>}</span>" + comma);
                        }
                    } else {
                        if (type == "number") {
                            html += FormatLiteral(obj, "", comma, indent, isArray, "Number");
                        } else {
                            if (type == "boolean") {
                                html += FormatLiteral(obj, "", comma, indent, isArray, "Boolean");
                            } else {
                                if (type == "function") {
                                    obj = FormatFunction(indent, obj);
                                    html += FormatLiteral(obj, "", comma, indent, isArray, "Function");
                                } else {
                                    if (type == "undefined") {
                                        html += FormatLiteral("undefined", "", comma, indent, isArray, "Null");
                                    } else {
                                        html += FormatLiteral(obj, '"', comma, indent, isArray, "String");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return html;
        };

        function FormatLiteral(literal, quote, comma, indent, isArray, style) {
            if (typeof literal == "string") {
                literal = literal.split("<").join("&lt;").split(">").join("&gt;");
            }
            var str = "<span class='" + style + "'>" + quote + literal + quote + comma + "</span>";
            if (isArray) {
                str = GetRow(indent, str);
            }
            return str;
        }

        function FormatFunction(indent, obj) {
            var tabs = "";
            for (var i = 0; i < indent; i++) {
                tabs += window.TAB;
            }
            var funcStrArray = obj.toString().split("\n");
            var str = "";
            for (var i = 0; i < funcStrArray.length; i++) {
                str += ((i == 0) ? "" : tabs) + funcStrArray[i] + "\n";
            }
            return str;
        }

        function GetRow(indent, data, isPropertyContent) {
            var tabs = "";
            for (var i = 0; i < indent && !isPropertyContent; i++) {
                tabs += window.TAB;
            }
            if (data != null && data.length > 0 && data.charAt(data.length - 1) != "\n") {
                data = data + "\n";
            }
            return tabs + data;
        };

        function clean() {
            $("#resultShow").empty();
            $("#request-body").val("");
        }
    </script>
</head>
<body>
<div class="request_param">
    <div id="reqParam"><h4>JSON格式化</h4>
        <button type="button" class="btn btn-primary" id="beautJSON"
                data-complete-text="Loading finished" onclick="Process()">美化JSON
        </button>
        <button type="button" class="btn btn-primary" id="clean"
                data-complete-text="Loading finished" onclick="clean()">清空
        </button>
        <!--<div id="warn"></div>-->
    </div>
    <div>
        <div class="inline" id="textIn">
          <textarea id="request-body" class="form-control" data-i18n-target="placeholder"
                    type="text" data-i18n="requestBodyTextarea" style="width: 99%;height:100%;resize:none;"></textarea>
        </div>
        <PRE class="inline" id="resultShow"></PRE>
    </div>
</div>
</body>
</html>